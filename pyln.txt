itergral division in py3:
	3//2 #=>1
	3/2 #=1.5

reload(<<module>>)  reload modules again to make module run again.

use namespace to minimize naming collision, occurred as a object has attributes. Every module file is a namespace.

object ::a set of data and operation on it(data)
弱类型： 可以将一块内存内容视为不同的类型，如C/C++
强类型：Python,如果一块内存为字符串，那么无法对其求和（字符串无法与数字求和）
slice操作： string[#head:#tail]
分片表达式赋值前会创建拷贝。 这样可以避免修改多个共享对象的引用修改一个对象时产生的不一致问题。
赋值操作总是存储对象的引用，而非对象的拷贝

You can't change  string contents(i.e. str[i]='char'), but you can (str='char'+str_new)

dictionary :: D={'key':'value',:::}
tuple:: T=(1,2,3,4,,,)
list:: L=[1,2,'asdf',,,]
'//' ::floor division, 解决除法结果取决于操作内型而产生不同结果的问题，避免使python作为动态语言变得难以预料

'/':: true division
0b[1][0][...] 二进制数字
变量名实质上是指向对象内存空间的指针
例子1
a=3
b=a
那么a=3,b=3
然后例子1.1
a='stringa'
那么a='stringa',b=3
由于整数/字符串是不可改变类型，赋值时实际创建了新对象

x==y 是否有相同的值
x is y 是否同一个对象,只比较实现引用的指针


零字符不会中断字符串
使用字符串需要注意转义，'c:\new\text.txt'中\n,\t都会被转义，可以使用r'c:\new\text.txt'来转义,或者使用\\

三重字符串""" ......"""，在换行处嵌入了\n。 可用作多行注释

try except else 
	首先使用try测试是否条件，如果有异常就执行except，否则没有异常，就执行else语句。

range(#N) #=> 0,1,2,...,N-1，一般用于循环

python对象无法在原处改变，故无自增自减运算

重定向输出流
import sys
sys.stdout=open('name.txt','a')
print xxx
sys.stdout.close()

使用 print>> 到对象
log=open('name.txt','w')
print >> log, CONTENT
log.close()

使用print string, 以保证输出在同一行上。

all(a,b,c) ａｂｃ全ｔｒｕｅ则ｔｒｕｅ 
any(a,b,c) ａｂｃ有一个ｔｒｕｅ则ｔｒｕｅ 


zip(la,lb)　用于将la lb联合起来并行遍历，可以用于制作字典。
对列表解析的解释不够详细

dict(zip(li1,li2))　将列表对象返回字典
无返回值的函数自动返回none对象

python不能区分同名函数与变量，如open

global x=3;　在函数中将ｘ定义为全局变量


对于多层嵌套的工厂函数，使用时要从外部传入参数，一层层传入.如
def m1(n1):
	def m2(n2):
		def m3(n3):
			return n3*n2*n1
		return m3
	return m2
可以使用p=m1(3),q=p(5), q(11)调用m3.

return x,y #->这里实际返回了(x,y)，但是括号被省略了。
关键字参数：通过变量名匹配参数，而不是通过位置顺序（默认为此）

def func(**args)   At there, only dict.key.param is valid

一个函数副作用的例子
list=[1,2,3]
list=list.append(4)
print list #=>None
cf. CHAPTER14 常见函数的陷阱
 
NNQ:=>notion of name qualification::其实是表达式，传回和对象匹配的属性名的值

reload会影响所有使用import读取了模块的客户端。因为使用import的客户端需要通过NNQ。重载后会发现模块对象中有了新值。

对用使用from的客户端，只会影响之后的对象，之前的不会影响。
from比import多的行为： 从被导入模块中复制一或多个变量到from语句所在的作用域中。这样，才可以直接使用被导入的变量名，而不是module.name。

from的问题：
	1)变量含义模糊，难以确定是那个模块定义的;
	2)reload调用时不能更新；
	3）破坏命名空间，可能会悄然覆盖正在作用域的变量名
form * 更会严重污染命名空间，宜少用。

重载::在对象树(类树）的


列表处理代码->suite


IDE: wingWare Python IDE
WebFrameWork :: django zope web2py pylons
ORM:: object relational mapper:: SQL Alchemy   
脚本：一个顶层程序文件的非正式说法
a=y if x else z   eq. to { if x: a=y; else a=z}
zip 适用于构造字典

为避免修改函数中可变参数的修改，可以对参数进行拷贝，如def f（a,b):  b=b[:]

and::若不存在假值，返回最后一个真值, 否则返回第一个假值。
or:: 返回第一个真值，若不存在，则返回假
生成器表达式大体上可以认为是对内存空间的优化：不像列表解析，需要一次性构造出整个列表。 实际运行略慢，对大集合来说可能是最优选择。

import 和from是赋值语句。 
	import将整个模块对象赋值给一个变量名
	from将若干个变量名赋值到另一个模块中的同名对象。
		
python包： 
顶层目录是容器，无需__init__.py，但需要被列入查找路径Pythonpath中。其下的子目录若需要被查找到，其中必须含有——init--.py。再包被导入时，--init--会被运行。


class Sub(Parent1,Parent2):...
模块是对象，  类是模块内的属性。

类中的运算符截获方法： --mul-- *    --add-- + //相当于重载
self 引用在python方法中必须列出的原因之一： 方法可以独立于类之外，表现为一个简单函数。因此，必须让隐含的实例参数明确化才行。

--slot-- =[attr1,'attr2'..]
这里可以用来限定实例类型，防治未赋值即使用和打字错误

decorator@
@parent

with ... as variable
example: with open(fileName) as myfile:
	with Function1() as f1:
