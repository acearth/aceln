//C   delete char until line end
R   replace like insert in windows
X   delete char before cursor
i   insert at line head
#|motion| <-- a command that moves the cursor
gg=top
G=bottom  #last line of the file.
ge <-- the end of the prior word
W B E gE <-- treat as long word<string> 
`` 	the last referred place by 'G' or 'gg', or modified place.
`` 	go to last marker or context(?)//?
, 	contray to ';', but i have to type twice because ',' has been mapped to leader.
H/M/L   move cursor line
^ 	go to the first non-blank place of this line 
#==
insert number parameter should before i/a
-----------------------------
| ( | head of this statement |
| ) | head of next statement |
|---+------------------------| 
| { | head of the paragraph  |
| } | head of next paragraph |
-----------------------------
	# paragraph:: non-blank line before next blank line
	   :: can be define by settings.

//$ view fileName  # only read fileName
$ vi -r [filename] # recover buffer [for filename]

named buffer for yank and delete
Usage:
"*yw "*yy "*dw  ->"*p

Q: how to stop highlight matching results?
A1: :noh

#|ex-mode| <--also called command mode
:= 	#line number total
:.= 	#line number of the current line

page 65 of the book(O'Reilly) ::regular expression

:.,$d 	delete all lines from current line to end of file
:%d 	delete all lines

:100;+5 p 	print the line from 100-105,  notice the semicolon
	#I've seen that the result is same as 100,+5p ; may be i ignored something.  QQQQ
:$  <-- stands for the last line of the file
:<range>normal <external cmd> := execute external command on range
:t==:copy
:m==:move
@:  repeqt last ex-mode cmd
@@  repeat the last @-command(i.e. MACRO)
:g/pattern/p 	show all matched results on command window
in ex-mode, ^r^w can yank the word cursored to the command line
q:  <-- in normal mode, open ex-command history window, can be modified for reuse :.,$w newfilename 	make curr to bottom to new file 
:.,$w>>in  in must exists
#==

#object <-- text objects, used in visual mode and operator pending mode
#see more at':h object'
 ca(  vi'
#==

#mark
:h mark-motions
`` == ^o //return to the last location before jump

m[char]  marker add
marker use
'[char] # go to first char of corresponding line
`[char] # go to corresponding place exactly
'' head of the last marker or context
`` last marker or context place exactly
m[UPPERchar] use Upper Case to mark global mark
:marks marks list
#==

#macro
q[char]	record marco, and then quit by press 'q'
	[char] is named register, may be collide with other register used for edit
@[char] used for execute recorded macro

[count]@[char]  execute macro in [count] times, !!need and 'j' or other motion to make macro can move.
:[range]normal @[char]  PARALLEL @[char] select region at first, then execute macro in parallel way.
:[range]normal @[char]  execute macro on range
:argdo normal @[char] execute macro on many files
##one example for numbering lines##
;let i=0
qa
I<C-r>=i<CR>)<ESC>
:let i+=1
q
##
#==
% current file
'#' blocked(alternate) file

\(RESERVED\):: anything between\( and \) will be reserved as \1,..\9

\<WORD\>:: word
~ 	last used pattern ::vi feature, no for vim(?)ïï, should be treated as deprecated;
& 	for delegate matched text,usage example: :s/put/&t>g/

~ 	also can be used as matched text.such as %/his/their   %/her/~
:%&g 	repeat replace on every line by using last replacing method
:~ 	like &, but using last Regexp for replacing.
	:s/red/blue
	:/green
	:~  #== :s/green/blue

:g/^$/d 	used for deleting all blank lines
::NOTICE:: on vi/vim learning PDF:page 88,there are some template for global replacing exercises.
		Page173, extended Regexp infomation
:s/./\L&/g 	make all char on this line in lower case,[.]match to every char and [g] ensure operation effective on every char
:r !<cmd>  	read some command subsequence and load it on buffer
SCRIPT:=file which contains executable command

wildmode <<  set wildmode for auto-completion.
	on zshell, a example is 
		set wildmenu
		set wildmode=full

#plugin <--useful plugins for vim
macros/matchit.vim --> used for jumping from matched open mark(such as 'if') and closed mark(such as 'end')
		   --> :h matchit-install

surround.vim --> used for surround the selection with a pair of marks.
	     --> e.g. S'

vim-bundler.vim --> generate path automatically by Gemfile

#==

#jump <-- jump among files

:jumps  show list of jumps action
^o <-- go back to hidden file
^i <-- go forward to hidden file
^^ <-- turn to alternate file
:changes  changes have made to every buffer
gf  go to the file under the cursor, may be need to set suffixesadd

#==

#pattern <-- string matching, find, and substitute
\c[pattern] ignoring case

\v activate VERY MAGIC search mode, assumed that [0-9][a-zA-z][_] are normal char, any other char has a special meaning.
\V very nomagic search mode::make string keep original meaning
:h /\<  :look helpfile for "/<"
/\v"[^"]+" ::match one or more chars except(")
/\v"\zs[^"]+\ze" :: like the example upon, but quote mark is excluded,but (") is key component of this match.

/\v<(w+)_s+\1> matching pattern for repeated word
_s ::space or <CR>

#==

#Notice:
` always direct to rightdown, so it can closed with another '`'.   
' single quoto
If you want to edit many file in one time, it's best to 'set hidden'

